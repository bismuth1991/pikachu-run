{"version":3,"sources":["game/game_canvas/draw_asset.js","game/game_canvas/draw_points.js","game/utils/collision_util.js","game/constant.js","game/game_canvas/draw_meteors.js","game/game_canvas/draw_dragonites.js","game/game_canvas/draw_primeapes.js","game/game_canvas/draw_bubbles.js","game/game_canvas/draw_spearows.js","game/utils/sprite.js","game/utils/physics.js","game/pikachu/pikachu_generator.js","game/pikachu/pikachu.js","game/bubbles/popping_line.js","game/utils/other_utils.js","game/bubbles/bubble_generator.js","game/bubbles/bubble.js","game/spearow/spearow_generator.js","game/spearow/spearow.js","game/dragonite/meteor_generator.js","game/dragonite/mini_meteor.js","game/dragonite/meteor.js","game/dragonite/dragonite_generator.js","game/domManipulators.js","game/dragonite/dragonite.js","game/primeape/primeape_sprite_sheets.js","game/primeape/primeape_generator.js","game/primeape/primeape.js","game/game_canvas/assets.js","game/game_canvas/draw_splash_screen.js","game/game_canvas/game_canvas.js","game/pikachu/pikachu_controls.js","index.js"],"names":["drawAsset","asset","ctx","isOutOfBounds","resetPhysics","physics","sprite","save","translate","x","y","drawImage","image","srcX","srcY","width","height","restore","updatePos","updateFrame","drawPikachu","pikachu","stayOnGround","drawPoints","score","lifeLeft","font","textAlign","fillStyle","fillText","isRRCollided","rect1","rect2","isRCCollided","rect","circle","distX","Math","abs","distY","radius","dx","dy","distanceBetweenCircles","circle1","circle2","sqrt","isCCCollided","GRAVITY","BASE_Y","CANVAS_HEIGHT","CANVAS_WIDTH","IGNORE_GRAVITY","ENERGY_LOSS","PIKACHU_HEIGHT","PIKACHU_WIDTH","PIKACHU_JUMP_HEIGHT","PIKACHU_RUN_SPEED","PIKACHU_MASS","SPAWN_X","SPAWN_Y","NUM_BUBBLES","MIN_RADIUS","MAX_RADIUS","MAX_ROTATION","BUBBLE_MIN_SPAWN_X","BUBBLE_MAX_SPAWN_X","BUBBLE_SPAWN_Y","NUM_POPPING_LINES","BUBBLE_POINTS","NUM_SPEAROWS","SPEAROW_MIN_SPAWN_Y","SPEAROW_MAX_SPAWN_Y","SPEAROW_MIN_SPAWN_X","SPEAROW_MAX_SPAWN_X","SPEAROW_SPEED","SPEAROW_POINTS","NUM_PRIMEAPES","PRIMEAPE_MIN_SPAWN_X","PRIMEAPE_MAX_SPAWN_X","PRIMEAPE_SPEED","PRIMEAPE_HEIGHT","PRIMEAPE_POINTS","PRIMEAPE_FRAMES_TILL_NEXT_ACTION","NUM_DRAGONITE","DRAGONITE_MIN_SPAWN_Y","DRAGONITE_MAX_SPAWN_Y","DRAGONITE_MIN_SPAWN_X","DRAGONITE_MAX_SPAWN_X","DRAGONITE_MIN_SPEED","DRAGONITE_MAX_SPEED","DRAGONITE_METEORS_ACTIVATION_X","DRAGONITE_METEORS_DEACTIVATION_X","DRAGONITE_POINTS","NUM_METEORS","METEOR_MASS","METEOR_FRICTION","METEOR_MIN_RADIUS","METEOR_MAX_RADIUS","METEOR_MIN_SPAWN_X","METEOR_MAX_SPAWN_X","METEOR_MIN_SPAWN_Y","METEOR_MAX_SPAWN_Y","METEOR_POINTS","METEOR_COLORS","NUM_MINI_METEORS","MINI_METEOR_MASS","MINI_METEOR_FRICTION","MINI_METEOR_MIN_RADIUS","MINI_METEOR_MAX_RADIUS","MINI_METEOR_POINTS","drawMeteor","drawMiniMeteor","miniMeteor","addPoints","beginPath","arc","PI","shadowColor","color","shadowBlur","shadowOffsetX","shadowOffsetY","fill","closePath","isHitGround","bounce","meteor","isInvincible","takeDamage","miniMeteors","length","i","timeToLive","splice","explosion","drawDragonites","drawDragonite","dragonite","isMeteorsActivate","activateDracoMeteor","meteors","deactivateDracoMeteor","dragonites","drawPrimeapes","drawPrimeape","primeape","updateFramesPassed","framesPassed","randomAction","resetFramesPassed","primeapes","drawBubbles","drawPoppingLine","line","getValues","strokeStyle","lineWidth","moveTo","lineTo","endX","endY","stroke","updateValues","drawBubble","bubble","pop","rotate","isPop","lines","rotation","bubbles","drawSpearows","drawSpearow","spearow","spearows","Sprite","sheetHeight","sheetWidth","rows","frameCount","currentFrame","isLeft","Physics","mass","dLeft","dRight","dUp","dDown","dX","dY","pikachuStaticSpriteSheet","require","pikachuRunRightSpriteSheet","pikachuRunLeftSpriteSheet","pikachuRunSpriteSheet","pikachuRollSpriteSheet","pikachuTakeDamageSpriteSheet","pikachuStatic","Image","src","pikachuRunRight","pikachuRunLeft","pikachuRun","pikachuRoll","pikachuTakeDamage","pikachuStaticSprite","pikachuRunRightSprite","pikachuRunLeftSprite","pikachuRunSprite","pikachuRollSprite","pikachuTakeDamageSprite","pikachuPhysics","Pikachu","points","isADPress","isKeyLock","knockback","setTimeout","keyUp","PoppingLine","originatedBubble","index","lineLength","popDistance","maxPopDistant","popDistanceReturn","inversePop","cos","sin","resetValues","randomFromRange","min","max","floor","random","randomColor","colors","bubblePhysics","bubbleRotation","bubbleRadius","Bubble","maxRotation","rotationDirection","push","spearowPhysics","Spearow","spearowSpriteSheet","spearowFly","spearowFlySprite","meteorPhysics","meteorRadius","meteorColor","miniMeteorPhysics","miniMeteorPhys","miniMeteorRadius","MiniMeteor","Meteor","reset","dragonitePhysics","getCanvasBackground","document","getElementsByClassName","addFilterInvert","element","classList","add","removeFilterInvert","remove","removeCanvasFilterInvert","canvasBackground","getVolumeButton","getElementById","isMute","volumeButton","contains","unMute","mute","getAudio","querySelector","playAudio","audio","play","pauseAudio","pause","setupVolumeButtonEventListener","addEventListener","Dragonite","dragoniteSpriteSheet","dragoniteSprite","makeMeteor","primeapeStaticSpriteSheet","primeapeRunSpriteSheet","primeapePunchSpriteSheet","primeapeStatic","primeapeRun","primeapePunch","primeapeStaticSprite","primeapeRunSprite","primeapePunchSprite","primeapePhysics","Primeape","randomNumber","stop","run","punch","initialAssets","makeDragonites","makePrimeapes","makeSpearows","makeBubbles","drawSplashScreen","fillRect","drawGameOver","GameCanvas","canvas","assets","state","fps","fpsInterval","then","performance","now","animate","requestAnimationFrame","elapsed","clearRect","Object","values","gameOver","faint","setupControlListeners","game","window","key","repeat","jump","runLeft","runRight","getContext","draw"],"mappings":"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","file":"src.09403008.map","sourceRoot":"../src","sourcesContent":["export const drawAsset = (asset, ctx) => {\n  if (asset.isOutOfBounds()) asset.resetPhysics();\n\n  const { physics, sprite } = asset;\n\n  ctx.save();\n  ctx.translate(physics.x, physics.y);\n\n  ctx.drawImage(\n    sprite.image, sprite.srcX(), sprite.srcY(), sprite.width, sprite.height,\n    0, 0, sprite.width, sprite.height,\n  );\n\n  ctx.restore();\n\n  physics.updatePos();\n  sprite.updateFrame();\n};\n\nexport const drawPikachu = (pikachu, ctx) => {\n  pikachu.stayOnGround();\n  drawAsset(pikachu, ctx);\n};\n","const drawPoints = (score, lifeLeft, ctx) => {\n  ctx.font = '20px Comic Sans MS';\n  ctx.textAlign = 'left';\n  ctx.fillStyle = 'black';\n\n  ctx.fillText(\n    `Score: ${score}     Life count: ${lifeLeft}`,\n    30,\n    30,\n  );\n};\n\nexport default drawPoints;\n","// rectangle to rectangle collision\nexport const isRRCollided = (rect1, rect2) => {\n  if (\n    rect1.physics.x < rect2.physics.x + rect2.sprite.width\n    && rect1.physics.x + rect1.sprite.width > rect2.physics.x\n    && rect1.physics.y < rect2.physics.y + rect2.sprite.height\n    && rect1.physics.y + rect1.sprite.height > rect2.physics.y\n  ) return true;\n\n  return false;\n};\n\n// reactangle to circle collision\nexport const isRCCollided = (rect, circle) => {\n  // Find the vertical & horizontal (distX/distY) distances\n  // between the circle’s center and the rectangle’s center\n  const distX = Math.abs(circle.physics.x - rect.physics.x - rect.sprite.width / 2);\n  const distY = Math.abs(circle.physics.y - rect.physics.y - rect.sprite.height / 2);\n\n\n  // If the distance is greater than halfCircle + halfRect,\n  // then they are too far apart to be colliding\n  if (distX > (rect.sprite.width / 2 + circle.radius)) { return false; }\n  if (distY > (rect.sprite.height / 2 + circle.radius)) { return false; }\n\n  // If the distance is less than halfRect then they are definitely colliding\n  if (distX <= (rect.sprite.width / 2)) { return true; }\n  if (distY <= (rect.sprite.height / 2)) { return true; }\n\n  // Test for collision at rect corner:\n  //  + Think of a line from the rect center to any rect corner\n  //  + Now extend that line by the radius of the circle\n  //  + If the circle’s center is on that line they are colliding at exactly that rect corner\n  // Using Pythagoras formula to compare the distance between circle and rect centers\n  const dx = distX - rect.sprite.width / 2;\n  const dy = distY - rect.sprite.height / 2;\n  return (dx * dx + dy * dy <= (circle.radius * circle.radius));\n};\n\n// circle to circle collision\nconst distanceBetweenCircles = (circle1, circle2) => {\n  const distX = circle2.physics.x - circle1.physics.x;\n  const distY = circle2.physics.y - circle1.physics.y;\n\n  return Math.sqrt((distX ** 2) + (distY ** 2));\n};\n\nexport const isCCCollided = (circle1, circle2) => (\n  distanceBetweenCircles(circle1, circle2) - circle1.radius - circle2.radius <= 0\n);\n","export const GRAVITY = 5;\nexport const BASE_Y = 389;\n\nexport const CANVAS_HEIGHT = 500;\nexport const CANVAS_WIDTH = 800;\n\nexport const IGNORE_GRAVITY = 0;\nexport const ENERGY_LOSS = 0.90;\n\n// Pikachu\nexport const PIKACHU_HEIGHT = 43;\nexport const PIKACHU_WIDTH = 60;\nexport const PIKACHU_JUMP_HEIGHT = 65;\nexport const PIKACHU_RUN_SPEED = 20;\nexport const PIKACHU_MASS = 0.8;\nexport const SPAWN_X = CANVAS_WIDTH / 2 - PIKACHU_WIDTH / 2;\nexport const SPAWN_Y = CANVAS_HEIGHT / 2 - PIKACHU_HEIGHT / 2 - 30;\n\n// Bubble\nexport const NUM_BUBBLES = 30;\nexport const MIN_RADIUS = 10;\nexport const MAX_RADIUS = 20;\nexport const MAX_ROTATION = 100;\nexport const BUBBLE_MIN_SPAWN_X = 0;\nexport const BUBBLE_MAX_SPAWN_X = CANVAS_WIDTH;\nexport const BUBBLE_SPAWN_Y = -50;\nexport const NUM_POPPING_LINES = 6;\nexport const BUBBLE_POINTS = 50;\n\n// Spearow\nexport const NUM_SPEAROWS = 5;\nexport const SPEAROW_MIN_SPAWN_Y = 150;\nexport const SPEAROW_MAX_SPAWN_Y = 270;\nexport const SPEAROW_MIN_SPAWN_X = 1000;\nexport const SPEAROW_MAX_SPAWN_X = 4000;\nexport const SPEAROW_SPEED = 15;\nexport const SPEAROW_POINTS = -100;\n\n// Primeape\nexport const NUM_PRIMEAPES = 1;\nexport const PRIMEAPE_MIN_SPAWN_X = 1000;\nexport const PRIMEAPE_MAX_SPAWN_X = 1500;\nexport const PRIMEAPE_SPEED = 10;\nexport const PRIMEAPE_HEIGHT = 66;\nexport const PRIMEAPE_POINTS = -300;\nexport const PRIMEAPE_FRAMES_TILL_NEXT_ACTION = 20;\n\n\n// Dragonite\nexport const NUM_DRAGONITE = 1;\nexport const DRAGONITE_MIN_SPAWN_Y = 10;\nexport const DRAGONITE_MAX_SPAWN_Y = 50;\nexport const DRAGONITE_MIN_SPAWN_X = 2000;\nexport const DRAGONITE_MAX_SPAWN_X = 4000;\nexport const DRAGONITE_MIN_SPEED = 5;\nexport const DRAGONITE_MAX_SPEED = 10;\nexport const DRAGONITE_METEORS_ACTIVATION_X = CANVAS_WIDTH - 200;\nexport const DRAGONITE_METEORS_DEACTIVATION_X = -200;\nexport const DRAGONITE_POINTS = -1000;\n\n// Meteor\nexport const NUM_METEORS = 10;\nexport const METEOR_MASS = 0.1;\nexport const METEOR_FRICTION = 0.95;\nexport const METEOR_MIN_RADIUS = 20;\nexport const METEOR_MAX_RADIUS = 30;\nexport const METEOR_MIN_SPAWN_X = 0;\nexport const METEOR_MAX_SPAWN_X = CANVAS_WIDTH;\nexport const METEOR_MIN_SPAWN_Y = -100;\nexport const METEOR_MAX_SPAWN_Y = -300;\nexport const METEOR_POINTS = -500;\nexport const METEOR_COLORS = ['#112F41', '#068587', '#4FB99F', '#F2B134', '#ED553B'];\n\n// Mini-meteor\nexport const NUM_MINI_METEORS = 10;\nexport const MINI_METEOR_MASS = 0.1;\nexport const MINI_METEOR_FRICTION = 0.99;\nexport const MINI_METEOR_MIN_RADIUS = 2;\nexport const MINI_METEOR_MAX_RADIUS = 3;\nexport const MINI_METEOR_POINTS = 50;\n","import { isRCCollided } from '../utils/collision_util';\nimport { METEOR_POINTS, MINI_METEOR_POINTS } from '../constant';\n\nconst drawMiniMeteor = (miniMeteor, pikachu, ctx) => {\n  if (isRCCollided(pikachu, miniMeteor)) pikachu.addPoints(MINI_METEOR_POINTS);\n\n  ctx.save();\n  ctx.translate(miniMeteor.physics.x, miniMeteor.physics.y);\n\n  ctx.beginPath();\n  ctx.arc(0, 0, miniMeteor.radius, 0, Math.PI * 2, false);\n\n  ctx.shadowColor = miniMeteor.color;\n  ctx.shadowBlur = 20;\n  ctx.shadowOffsetX = 0;\n  ctx.shadowOffsetY = 0;\n\n  ctx.fillStyle = miniMeteor.color;\n  ctx.fill();\n  ctx.closePath();\n\n  ctx.restore();\n\n  if (miniMeteor.isHitGround()) miniMeteor.bounce();\n\n  miniMeteor.physics.updatePos();\n};\n\nconst drawMeteor = (meteor, pikachu, ctx) => {\n  if (isRCCollided(pikachu, meteor) && !pikachu.isInvincible) {\n    pikachu.takeDamage();\n    pikachu.addPoints(METEOR_POINTS);\n  }\n\n  ctx.save();\n  ctx.translate(meteor.physics.x, meteor.physics.y);\n\n  ctx.beginPath();\n  ctx.arc(0, 0, meteor.radius, 0, Math.PI * 2, false);\n\n  ctx.shadowColor = meteor.color;\n  ctx.shadowBlur = 20;\n  ctx.shadowOffsetX = 0;\n  ctx.shadowOffsetY = 0;\n\n  ctx.fillStyle = meteor.color;\n  ctx.fill();\n  ctx.closePath();\n\n  ctx.restore();\n\n  if (meteor.miniMeteors.length > 0) {\n    for (let i = 0; i < meteor.miniMeteors.length; i += 1) {\n      const miniMeteor = meteor.miniMeteors[i];\n      drawMiniMeteor(miniMeteor, pikachu, ctx);\n\n      miniMeteor.timeToLive -= 1;\n      if (miniMeteor.timeToLive <= 0) {\n        meteor.miniMeteors.splice(i, 1);\n      }\n    }\n  }\n\n  if (meteor.isHitGround()) {\n    meteor.explosion();\n    meteor.bounce();\n  }\n\n  meteor.physics.updatePos();\n};\n\n\nexport default drawMeteor;\n","import { isRRCollided } from '../utils/collision_util';\nimport { drawAsset } from './draw_asset';\nimport drawMeteor from './draw_meteors';\n\nimport {\n  DRAGONITE_METEORS_ACTIVATION_X,\n  DRAGONITE_POINTS,\n} from '../constant';\n\nconst drawDragonite = (dragonite, pikachu, ctx) => {\n  drawAsset(dragonite, ctx);\n\n  if (isRRCollided(pikachu, dragonite) && !pikachu.isInvincible) {\n    pikachu.takeDamage();\n    pikachu.addPoints(DRAGONITE_POINTS);\n  }\n\n  if (dragonite.physics.x < DRAGONITE_METEORS_ACTIVATION_X && !dragonite.isMeteorsActivate) {\n    dragonite.activateDracoMeteor();\n  }\n\n  if (dragonite.meteors.length > 0) {\n    for (let i = 0; i < dragonite.meteors.length; i += 1) {\n      drawMeteor(dragonite.meteors[i], pikachu, ctx);\n    }\n  }\n\n  if (dragonite.isOutOfBounds()) {\n    dragonite.deactivateDracoMeteor();\n  }\n};\n\nconst drawDragonites = (dragonites, pikachu, ctx) => {\n  for (let i = 0; i < dragonites.length; i += 1) {\n    drawDragonite(dragonites[i], pikachu, ctx);\n  }\n};\n\nexport default drawDragonites;\n","import { drawAsset } from './draw_asset';\nimport { isRRCollided } from '../utils/collision_util';\n\nimport {\n  PRIMEAPE_POINTS,\n  PRIMEAPE_FRAMES_TILL_NEXT_ACTION,\n} from '../constant';\n\nconst drawPrimeape = (primeape, pikachu, ctx) => {\n  drawAsset(primeape, ctx);\n\n  if (isRRCollided(pikachu, primeape) && !pikachu.isInvincible) {\n    pikachu.takeDamage();\n    pikachu.addPoints(PRIMEAPE_POINTS);\n  }\n\n  primeape.updateFramesPassed();\n\n  if (primeape.framesPassed > PRIMEAPE_FRAMES_TILL_NEXT_ACTION) {\n    primeape.randomAction();\n    primeape.resetFramesPassed();\n  }\n};\n\nconst drawPrimeapes = (primeapes, pikachu, ctx) => {\n  for (let i = 0; i < primeapes.length; i += 1) {\n    drawPrimeape(primeapes[i], pikachu, ctx);\n  }\n};\n\nexport default drawPrimeapes;\n","import { isRCCollided } from '../utils/collision_util';\nimport { BUBBLE_POINTS } from '../constant';\n\nconst drawPoppingLine = (line, ctx) => {\n  line.getValues();\n\n  ctx.beginPath();\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 1;\n\n  ctx.moveTo(line.x, line.y);\n\n  ctx.lineTo(line.x + line.endX, line.y + line.endY);\n  ctx.stroke();\n\n  line.updateValues();\n};\n\nconst drawBubble = (bubble, pikachu, ctx) => {\n  if (isRCCollided(pikachu, bubble, ctx)) {\n    bubble.pop();\n    pikachu.addPoints(BUBBLE_POINTS);\n  }\n\n  bubble.rotate();\n\n  if (!bubble.isPop) {\n    ctx.save();\n    ctx.translate(bubble.physics.x, bubble.physics.y);\n    ctx.rotate(bubble.rotation * Math.PI / 180);\n\n    ctx.beginPath();\n    ctx.strokeStyle = 'black';\n    ctx.lineWidth = 1;\n    ctx.arc(0, 0, bubble.radius - 3, 0, Math.PI * 1.5, true);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.arc(0, 0, bubble.radius, 0, Math.PI * 2, false);\n    ctx.stroke();\n\n    ctx.restore();\n\n    if (bubble.isOutOfBounds()) bubble.resetPhysics();\n  } else {\n    for (let i = 0; i < bubble.lines.length; i += 1) {\n      drawPoppingLine(bubble.lines[i], ctx);\n    }\n  }\n\n  bubble.physics.updatePos();\n};\n\nconst drawBubbles = (bubbles, pikachu, ctx) => {\n  for (let i = 0; i < bubbles.length; i += 1) {\n    drawBubble(bubbles[i], pikachu, ctx);\n  }\n};\n\nexport default drawBubbles;\n","import { drawAsset } from './draw_asset';\nimport { isRRCollided } from '../utils/collision_util';\nimport { SPEAROW_POINTS } from '../constant';\n\nconst drawSpearow = (spearow, pikachu, ctx) => {\n  if (isRRCollided(pikachu, spearow) && !pikachu.isInvincible) {\n    pikachu.takeDamage();\n    pikachu.addPoints(SPEAROW_POINTS);\n  }\n\n  drawAsset(spearow, ctx);\n};\n\nconst drawSpearows = (spearows, pikachu, ctx) => {\n  for (let i = 0; i < spearows.length; i += 1) {\n    drawSpearow(spearows[i], pikachu, ctx);\n  }\n};\n\nexport default drawSpearows;\n","class Sprite {\n  constructor(image, sheetHeight, sheetWidth, rows, frameCount) {\n    this.image = image;\n    this.height = sheetHeight / rows;\n    this.width = sheetWidth / frameCount;\n    this.frameCount = frameCount;\n    this.currentFrame = 0;\n    this.isLeft = false;\n  }\n\n  srcX() {\n    return this.currentFrame * this.width;\n  }\n\n  srcY() {\n    return this.isLeft ? this.height : 0;\n  }\n\n  updateFrame() {\n    this.currentFrame = (this.currentFrame + 1) % this.frameCount;\n  }\n}\n\nexport default Sprite;\n","import { GRAVITY, BASE_Y, ENERGY_LOSS } from '../constant';\n\nclass Physics {\n  constructor(x, y, mass) {\n    this.x = x;\n    this.y = y;\n    this.mass = mass;\n    this.dLeft = 0;\n    this.dRight = 0;\n    this.dUp = 0;\n    this.dDown = 0;\n  }\n\n  dX() {\n    return -this.dLeft + this.dRight;\n  }\n\n  dY() {\n    return -this.dUp + this.dDown;\n  }\n\n  updatePos() {\n    if (this.y < BASE_Y) {\n      this.dUp *= ENERGY_LOSS;\n      this.dDown += GRAVITY * this.mass;\n    }\n\n    this.x += this.dX();\n    this.y += this.dY();\n  }\n}\n\nexport default Physics;\n","import Sprite from '../utils/sprite';\nimport Physics from '../utils/physics';\n\nimport {\n  SPAWN_X,\n  SPAWN_Y,\n  IGNORE_GRAVITY,\n} from '../constant';\n\nconst pikachuStaticSpriteSheet = require('../../assets/images/pikachu-standing.png');\nconst pikachuRunRightSpriteSheet = require('../../assets/images/pikachu-running-right.png');\nconst pikachuRunLeftSpriteSheet = require('../../assets/images/pikachu-running-left.png');\nconst pikachuRunSpriteSheet = require('../../assets/images/pikachu-running.png');\nconst pikachuRollSpriteSheet = require('../../assets/images/pikachu-rolling.png');\nconst pikachuTakeDamageSpriteSheet = require('../../assets/images/pikachu-take-damage.png');\n\nconst pikachuStatic = new Image();\npikachuStatic.src = pikachuStaticSpriteSheet;\n\nconst pikachuRunRight = new Image();\npikachuRunRight.src = pikachuRunRightSpriteSheet;\n\nconst pikachuRunLeft = new Image();\npikachuRunLeft.src = pikachuRunLeftSpriteSheet;\n\nconst pikachuRun = new Image();\npikachuRun.src = pikachuRunSpriteSheet;\n\nconst pikachuRoll = new Image();\npikachuRoll.src = pikachuRollSpriteSheet;\n\nconst pikachuTakeDamage = new Image();\npikachuTakeDamage.src = pikachuTakeDamageSpriteSheet;\n\nexport const pikachuStaticSprite = new Sprite(pikachuStatic, 96, 161, 2, 4);\nexport const pikachuRunRightSprite = new Sprite(pikachuRunRight, 48, 240, 1, 4);\nexport const pikachuRunLeftSprite = new Sprite(pikachuRunLeft, 48, 240, 1, 4);\nexport const pikachuRunSprite = new Sprite(pikachuRun, 96, 240, 2, 4);\nexport const pikachuRollSprite = new Sprite(pikachuRoll, 96, 192, 2, 4);\nexport const pikachuTakeDamageSprite = new Sprite(pikachuTakeDamage, 96, 294, 2, 6);\n\nexport const pikachuPhysics = () => new Physics(\n  SPAWN_X,\n  SPAWN_Y,\n  IGNORE_GRAVITY,\n);\n","import {\n  BASE_Y,\n  GRAVITY,\n  PIKACHU_JUMP_HEIGHT,\n  PIKACHU_RUN_SPEED,\n  CANVAS_WIDTH,\n  PIKACHU_HEIGHT,\n} from '../constant';\n\nimport {\n  pikachuRollSprite,\n  pikachuStaticSprite,\n  pikachuRunSprite,\n  pikachuTakeDamageSprite,\n  pikachuPhysics,\n} from './pikachu_generator';\n\nclass Pikachu {\n  constructor() {\n    this.physics = pikachuPhysics();\n    this.sprite = pikachuRunSprite;\n    this.points = 0;\n    this.lifeLeft = 3;\n    this.isADPress = false;\n    this.isLeft = false;\n    this.isKeyLock = true;\n  }\n\n  addPoints(points) {\n    this.points += points;\n  }\n\n  jump() {\n    this.sprite = pikachuRollSprite;\n    this.sprite.isLeft = this.isLeft;\n    this.physics.dUp = PIKACHU_JUMP_HEIGHT;\n  }\n\n  takeDamage(knockback = 5) {\n    this.lifeLeft -= 1;\n    this.sprite = pikachuTakeDamageSprite;\n    this.sprite.isLeft = this.isLeft;\n    this.physics.dLeft = 0;\n    this.physics.dRight = 0;\n    this.isKeyLock = true;\n    this.isInvincible = true;\n\n    if (this.isLeft) {\n      this.physics.dRight = knockback;\n    } else {\n      this.physics.dLeft = knockback;\n    }\n\n    setTimeout(() => { this.sprite = pikachuStaticSprite; this.isKeyLock = false; }, 1000);\n    setTimeout(() => { this.isInvincible = false; }, 2000);\n  }\n\n  faint() {\n    this.physics = pikachuPhysics();\n    this.isKeyLock = true;\n    this.sprite = pikachuTakeDamageSprite;\n  }\n\n  runLeft() {\n    if (this.isADPress) return;\n    this.isADPress = true;\n    this.isLeft = true;\n    this.sprite = pikachuRunSprite;\n    this.sprite.isLeft = this.isLeft;\n    this.physics.dRight = 0;\n    this.physics.dLeft = PIKACHU_RUN_SPEED;\n  }\n\n  runRight() {\n    if (this.isADPress) return;\n    this.isADPress = true;\n    this.isLeft = false;\n    this.sprite = pikachuRunSprite;\n    this.sprite.isLeft = this.isLeft;\n    this.physics.dLeft = 0;\n    this.physics.dRight = PIKACHU_RUN_SPEED;\n  }\n\n  stop(keyUp) {\n    if (keyUp === 'd') {\n      this.isADPress = false;\n      this.physics.dRight = 0;\n    }\n    if (keyUp === 'a') {\n      this.isADPress = false;\n      this.physics.dLeft = 0;\n    }\n    if (this.physics.dX() === 0) {\n      this.sprite = pikachuStaticSprite;\n      this.sprite.isLeft = this.isLeft;\n    }\n  }\n\n  stayOnGround() {\n    const { physics } = this;\n    if (physics.y + physics.dY() + GRAVITY * physics.mass > BASE_Y - PIKACHU_HEIGHT) {\n      physics.y = BASE_Y - PIKACHU_HEIGHT;\n      physics.dDown = 0;\n      physics.dUp = 0;\n    }\n  }\n\n  isOutOfBounds() {\n    const { x } = this.physics;\n    return (x < 0 || x + this.sprite.width > CANVAS_WIDTH);\n  }\n\n  resetPhysics() {\n    const { x } = this.physics;\n\n    if (x < 0) this.physics.x = 0;\n    if (x + this.sprite.width > CANVAS_WIDTH) this.physics.x = CANVAS_WIDTH - this.sprite.width;\n  }\n}\n\nexport default Pikachu;\n","class PoppingLine {\n  constructor(originatedBubble, index) {\n    this.bubble = originatedBubble;\n    this.index = index;\n\n    this.lineLength = 0;\n    this.popDistance = 0;\n    this.maxPopDistant = this.bubble.radius * 0.3;\n    this.popDistanceReturn = 0;\n    this.inversePop = false;\n  }\n\n  resetValues() {\n    this.lineLength = 0;\n    this.popDistance = 0;\n    this.popDistanceReturn = 0;\n    this.inversePop = false;\n  }\n\n  getValues() {\n    const { bubble, popDistanceReturn, popDistance, index } = this;\n\n    this.x = bubble.physics.x\n      + (bubble.radius + popDistanceReturn) * Math.cos(2 * Math.PI * index / bubble.lines.length);\n    this.y = bubble.physics.y\n      + (bubble.radius + popDistanceReturn) * Math.sin(2 * Math.PI * index / bubble.lines.length);\n\n    this.lineLength = bubble.radius * popDistance;\n    this.endX = this.lineLength;\n    this.endY = this.lineLength;\n\n    if (this.x < bubble.physics.x) {\n      this.endX = -this.lineLength;\n    }\n    if (this.y < bubble.physics.y) {\n      this.endY = -this.lineLength;\n    }\n    if (this.y === bubble.physics.y) {\n      this.endY = 0;\n    }\n    if (this.x === bubble.physics.x) {\n      this.endX = 0;\n    }\n  }\n\n  updateValues() {\n    if (this.lineLength < this.maxPopDistant && !this.inversePop) {\n      this.popDistance += 0.06;\n    } else if (this.popDistance >= 0) {\n      this.inversePop = true;\n      this.popDistanceReturn += 1;\n      this.popDistance -= 0.03;\n    } else {\n      this.resetValues();\n      this.bubble.resetPhysics();\n      this.bubble.isPop = false;\n    }\n  }\n}\n\nexport default PoppingLine;\n","export const randomFromRange = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nexport const randomColor = colors => colors[Math.floor(Math.random() * colors.length)];\n","import Physics from '../utils/physics';\n\nimport { randomFromRange } from '../utils/other_utils';\n\nimport {\n  MIN_RADIUS,\n  MAX_RADIUS,\n  MAX_ROTATION,\n  IGNORE_GRAVITY,\n  BUBBLE_MIN_SPAWN_X,\n  BUBBLE_MAX_SPAWN_X,\n  BUBBLE_SPAWN_Y,\n} from '../constant';\n\nexport const bubblePhysics = () => {\n  const physics = new Physics(\n    randomFromRange(BUBBLE_MIN_SPAWN_X, BUBBLE_MAX_SPAWN_X),\n    BUBBLE_SPAWN_Y,\n    IGNORE_GRAVITY,\n  );\n\n  physics.dDown = randomFromRange(1, 5);\n  physics.dLeft = randomFromRange(0, 5);\n  physics.dRight = randomFromRange(0, 5);\n\n  return physics;\n};\n\nexport const bubbleRotation = () => Math.floor(Math.random() * (2 * MAX_ROTATION)) - MAX_ROTATION;\n\nexport const bubbleRadius = () => randomFromRange(MIN_RADIUS, MAX_RADIUS);\n","import PoppingLine from './popping_line';\n\nimport {\n  bubblePhysics,\n  bubbleRadius,\n  bubbleRotation,\n} from './bubble_generator';\n\nimport {\n  NUM_BUBBLES,\n  NUM_POPPING_LINES,\n  MAX_ROTATION,\n  CANVAS_HEIGHT,\n  CANVAS_WIDTH,\n} from '../constant';\n\nclass Bubble {\n  constructor() {\n    this.physics = bubblePhysics();\n    this.radius = bubbleRadius();\n\n    this.isPop = false;\n    this.maxRotation = MAX_ROTATION;\n    this.rotation = bubbleRotation();\n    this.rotationDirection = 'forward';\n\n    this.lines = [];\n    for (let i = 0; i < NUM_POPPING_LINES; i += 1) {\n      this.lines.push(new PoppingLine(this, i));\n    }\n  }\n\n  static makeBubbles() {\n    const bubbles = [];\n    for (let i = 0; i < NUM_BUBBLES; i += 1) {\n      bubbles.push(new Bubble());\n    }\n\n    return bubbles;\n  }\n\n  rotate() {\n    if (this.rotationDirection === 'forward') {\n      if (this.rotation < this.maxRotation) {\n        this.rotation += 1;\n      } else {\n        this.rotationDirection = 'backward';\n      }\n    } else if (this.rotation > -this.maxRotation) {\n      this.rotation -= 1;\n    } else {\n      this.rotationDirection = 'forward';\n    }\n  }\n\n  pop() {\n    this.isPop = true;\n  }\n\n  resetPhysics() {\n    this.physics = bubblePhysics();\n  }\n\n  isOutOfBounds() {\n    return (this.physics.x > CANVAS_WIDTH || this.physics.x < 0 || this.physics.y > CANVAS_HEIGHT);\n  }\n}\n\nexport default Bubble;\n","import Physics from '../utils/physics';\n\nimport {\n  SPEAROW_MIN_SPAWN_Y,\n  SPEAROW_MAX_SPAWN_Y,\n  IGNORE_GRAVITY,\n  SPEAROW_SPEED,\n  SPEAROW_MIN_SPAWN_X,\n  SPEAROW_MAX_SPAWN_X,\n} from '../constant';\n\nimport { randomFromRange } from '../utils/other_utils';\n\nconst spearowPhysics = () => {\n  const physics = new Physics(\n    randomFromRange(SPEAROW_MIN_SPAWN_X, SPEAROW_MAX_SPAWN_X),\n    randomFromRange(SPEAROW_MIN_SPAWN_Y, SPEAROW_MAX_SPAWN_Y),\n    IGNORE_GRAVITY,\n  );\n  physics.dLeft = SPEAROW_SPEED;\n\n  return physics;\n};\n\nexport default spearowPhysics;\n","import Sprite from '../utils/sprite';\nimport spearowPhysics from './spearow_generator';\nimport { NUM_SPEAROWS } from '../constant';\n\nconst spearowSpriteSheet = require('../../assets/images/spearow-small.png');\n\nconst spearowFly = new Image();\nspearowFly.src = spearowSpriteSheet;\nconst spearowFlySprite = new Sprite(spearowFly, 50, 224, 1, 4);\n\nclass Spearow {\n  constructor() {\n    this.physics = spearowPhysics();\n    this.sprite = spearowFlySprite;\n  }\n\n  static makeSpearows() {\n    const spearows = [];\n    for (let i = 0; i < NUM_SPEAROWS; i += 1) {\n      spearows.push(new Spearow());\n    }\n\n    return spearows;\n  }\n\n  isOutOfBounds() {\n    return this.physics.x + this.sprite.width < 0;\n  }\n\n  resetPhysics() {\n    this.physics = spearowPhysics();\n  }\n}\n\nexport default Spearow;\n","import Physics from '../utils/physics';\n\nimport {\n  randomFromRange,\n  randomColor,\n} from '../utils/other_utils';\n\nimport {\n  METEOR_MASS,\n  METEOR_MIN_SPAWN_Y,\n  METEOR_MAX_SPAWN_X,\n  METEOR_MAX_SPAWN_Y,\n  METEOR_MIN_SPAWN_X,\n  METEOR_MIN_RADIUS,\n  METEOR_MAX_RADIUS,\n  METEOR_COLORS,\n  MINI_METEOR_MASS,\n  MINI_METEOR_MIN_RADIUS,\n  MINI_METEOR_MAX_RADIUS,\n} from '../constant';\n\nexport const meteorPhysics = () => {\n  const physics = new Physics(\n    randomFromRange(METEOR_MIN_SPAWN_X, METEOR_MAX_SPAWN_X),\n    randomFromRange(METEOR_MIN_SPAWN_Y, METEOR_MAX_SPAWN_Y),\n    METEOR_MASS,\n  );\n\n  physics.dDown = randomFromRange(0, 1);\n  physics.dLeft = randomFromRange(0, 20);\n  physics.dRight = randomFromRange(0, 20);\n\n  return physics;\n};\n\nexport const meteorRadius = () => randomFromRange(METEOR_MIN_RADIUS, METEOR_MAX_RADIUS);\n\nexport const meteorColor = () => randomColor(METEOR_COLORS);\n\nexport const miniMeteorPhysics = (x, y) => {\n  const miniMeteorPhys = new Physics(x, y, MINI_METEOR_MASS);\n\n  miniMeteorPhys.dUp = randomFromRange(5, 50);\n  miniMeteorPhys.dLeft = randomFromRange(5, 50);\n  miniMeteorPhys.dRight = randomFromRange(5, 50);\n\n  return miniMeteorPhys;\n};\n\nexport const miniMeteorRadius = () => (\n  randomFromRange(MINI_METEOR_MIN_RADIUS, MINI_METEOR_MAX_RADIUS)\n);\n","import {\n  miniMeteorPhysics,\n  miniMeteorRadius,\n} from './meteor_generator';\n\nimport {\n  BASE_Y,\n  MINI_METEOR_FRICTION,\n} from '../constant';\n\nclass MiniMeteor {\n  constructor(x, y, color) {\n    this.physics = miniMeteorPhysics(x, y);\n    this.radius = miniMeteorRadius();\n    this.color = color;\n    this.timeToLive = 50;\n  }\n\n  isHitGround() {\n    return this.physics.y + this.radius >= BASE_Y;\n  }\n\n  bounce() {\n    this.physics.dUp = this.physics.dDown * MINI_METEOR_FRICTION;\n    this.physics.dDown = 0;\n    this.physics.dLeft *= MINI_METEOR_FRICTION;\n    this.physics.dRight *= MINI_METEOR_FRICTION;\n  }\n}\n\nexport default MiniMeteor;\n","import MiniMeteor from './mini_meteor';\n\nimport {\n  meteorPhysics,\n  meteorRadius,\n  meteorColor,\n} from './meteor_generator';\n\nimport {\n  BASE_Y,\n  NUM_METEORS,\n  METEOR_FRICTION,\n  NUM_MINI_METEORS,\n} from '../constant';\n\nclass Meteor {\n  constructor() {\n    this.physics = meteorPhysics();\n    this.radius = meteorRadius();\n    this.color = meteorColor();\n\n    this.miniMeteors = [];\n  }\n\n  static makeMeteor() {\n    const meteors = [];\n    for (let i = 0; i < NUM_METEORS; i += 1) {\n      meteors.push(new Meteor());\n    }\n\n    return meteors;\n  }\n\n  isHitGround() {\n    return this.physics.y + this.radius > BASE_Y;\n  }\n\n  bounce() {\n    this.physics.dUp = this.physics.dDown * METEOR_FRICTION;\n    this.physics.dDown = 0;\n    this.physics.dLeft *= METEOR_FRICTION;\n    this.physics.dRight *= METEOR_FRICTION;\n  }\n\n  reset() {\n    this.physics = meteorPhysics();\n    this.radius = meteorRadius();\n    this.color = meteorColor();\n  }\n\n  explosion() {\n    for (let i = 0; i < NUM_MINI_METEORS; i += 1) {\n      this.miniMeteors.push(new MiniMeteor(this.physics.x, this.physics.y, this.color));\n    }\n\n    if (this.radius <= 15) this.reset();\n    this.radius -= 5;\n  }\n}\n\nexport default Meteor;\n","import Physics from '../utils/physics';\nimport { randomFromRange } from '../utils/other_utils';\nimport {\n  IGNORE_GRAVITY,\n  DRAGONITE_MIN_SPAWN_X,\n  DRAGONITE_MAX_SPAWN_X,\n  DRAGONITE_MIN_SPAWN_Y,\n  DRAGONITE_MAX_SPAWN_Y,\n  DRAGONITE_MIN_SPEED,\n  DRAGONITE_MAX_SPEED,\n} from '../constant';\n\nconst dragonitePhysics = () => {\n  const physics = new Physics(\n    randomFromRange(DRAGONITE_MIN_SPAWN_X, DRAGONITE_MAX_SPAWN_X),\n    randomFromRange(DRAGONITE_MIN_SPAWN_Y, DRAGONITE_MAX_SPAWN_Y),\n    IGNORE_GRAVITY,\n  );\n\n  physics.dLeft = randomFromRange(DRAGONITE_MIN_SPEED, DRAGONITE_MAX_SPEED);\n\n  return physics;\n};\n\nexport default dragonitePhysics;\n","export const getCanvasBackground = () => document.getElementsByClassName('canvas-container')[0];\n\nexport const addFilterInvert = (element) => {\n  element.classList.add('filter-invert');\n};\n\nexport const removeFilterInvert = (element) => {\n  element.classList.remove('filter-invert');\n};\n\nexport const removeCanvasFilterInvert = () => {\n  const canvasBackground = getCanvasBackground();\n  removeFilterInvert(canvasBackground);\n};\n\nconst getVolumeButton = () => document.getElementById('volume-button');\n\nconst isMute = () => {\n  const volumeButton = getVolumeButton();\n  // debugger;\n  return volumeButton.classList.contains('fa-volume-mute');\n};\n\nconst unMute = () => {\n  const volumeButton = getVolumeButton();\n  volumeButton.classList.remove('fa-volume-mute');\n  volumeButton.classList.add('fa-volume-up');\n};\n\nconst mute = () => {\n  const volumeButton = getVolumeButton();\n  volumeButton.classList.remove('fa-volume-up');\n  volumeButton.classList.add('fa-volume-mute');\n};\n\nconst getAudio = () => document.querySelector('audio');\n\nexport const playAudio = () => {\n  const audio = getAudio();\n\n  unMute();\n  audio.play();\n};\n\nexport const pauseAudio = () => {\n  const audio = getAudio();\n\n  mute();\n  audio.pause();\n};\n\nexport const setupVolumeButtonEventListener = () => {\n  const volumeButton = getVolumeButton();\n  volumeButton.addEventListener('click', () => {\n    if (isMute()) {\n      playAudio();\n    } else {\n      pauseAudio();\n    }\n  });\n};\n","import Sprite from '../utils/sprite';\nimport Meteor from './meteor';\nimport dragonitePhysics from './dragonite_generator';\n\nimport {\n  getCanvasBackground,\n  addFilterInvert,\n  removeFilterInvert,\n} from '../domManipulators';\n\nimport {\n  NUM_DRAGONITE,\n  DRAGONITE_METEORS_DEACTIVATION_X,\n} from '../constant';\n\nconst dragoniteSpriteSheet = require('../../assets/images/dragonite-small.png');\n\nconst dragonite = new Image();\ndragonite.src = dragoniteSpriteSheet;\nconst dragoniteSprite = new Sprite(dragonite, 252, 1760, 2, 11);\n\nclass Dragonite {\n  constructor() {\n    this.physics = dragonitePhysics();\n    this.sprite = dragoniteSprite;\n    this.sprite.isLeft = true;\n\n    this.meteors = [];\n    this.isMeteorsActivate = false;\n  }\n\n  static makeDragonites() {\n    const dragonites = [];\n    for (let i = 0; i < NUM_DRAGONITE; i += 1) {\n      dragonites.push(new Dragonite());\n    }\n    return dragonites;\n  }\n\n  isOutOfBounds() {\n    return this.physics.x + this.sprite.width < DRAGONITE_METEORS_DEACTIVATION_X;\n  }\n\n  resetPhysics() {\n    this.physics = dragonitePhysics();\n  }\n\n  activateDracoMeteor() {\n    this.meteors = Meteor.makeMeteor();\n    this.isMeteorsActivate = true;\n\n    const canvasBackground = getCanvasBackground();\n    addFilterInvert(canvasBackground);\n  }\n\n  deactivateDracoMeteor() {\n    this.meteors = [];\n    this.isMeteorsActivate = false;\n\n    const canvasBackground = getCanvasBackground();\n    removeFilterInvert(canvasBackground);\n  }\n}\n\nexport default Dragonite;\n","import Sprite from '../utils/sprite';\n\nconst primeapeStaticSpriteSheet = require('../../assets/images/primeape-stand.png');\nconst primeapeRunSpriteSheet = require('../../assets/images/primeape-run.png');\nconst primeapePunchSpriteSheet = require('../../assets/images/primeape-focus-punch.png');\n\nconst primeapeStatic = new Image();\nprimeapeStatic.src = primeapeStaticSpriteSheet;\n\nconst primeapeRun = new Image();\nprimeapeRun.src = primeapeRunSpriteSheet;\n\nconst primeapePunch = new Image();\nprimeapePunch.src = primeapePunchSpriteSheet;\n\nexport const primeapeStaticSprite = new Sprite(primeapeStatic, 69, 748, 1, 11);\nexport const primeapeRunSprite = new Sprite(primeapeRun, 69, 740, 1, 10);\nexport const primeapePunchSprite = new Sprite(primeapePunch, 69, 1560, 1, 12);\n","import Physics from '../utils/physics';\n\nimport { randomFromRange } from '../utils/other_utils';\n\nimport {\n  PRIMEAPE_MIN_SPAWN_X,\n  PRIMEAPE_MAX_SPAWN_X,\n  BASE_Y,\n  IGNORE_GRAVITY,\n  PRIMEAPE_SPEED,\n  PRIMEAPE_HEIGHT,\n} from '../constant';\n\nconst primeapePhysics = () => {\n  const physics = new Physics(\n    randomFromRange(PRIMEAPE_MIN_SPAWN_X, PRIMEAPE_MAX_SPAWN_X),\n    BASE_Y - PRIMEAPE_HEIGHT,\n    IGNORE_GRAVITY,\n  );\n\n  physics.dLeft = PRIMEAPE_SPEED;\n\n  return physics;\n};\n\nexport default primeapePhysics;\n","import {\n  primeapeStaticSprite,\n  primeapeRunSprite,\n  primeapePunchSprite,\n} from './primeape_sprite_sheets';\n\nimport {\n  PRIMEAPE_SPEED,\n  NUM_PRIMEAPES,\n} from '../constant';\n\nimport { randomFromRange } from '../utils/other_utils';\nimport primeapePhysics from './primeape_generator';\n\nclass Primeape {\n  constructor() {\n    this.physics = primeapePhysics();\n    this.sprite = primeapeRunSprite;\n    this.framesPassed = 0;\n  }\n\n  static makePrimeapes() {\n    const primeapes = [];\n    for (let i = 0; i < NUM_PRIMEAPES; i += 1) {\n      primeapes.push(new Primeape());\n    }\n    return primeapes;\n  }\n\n  updateFramesPassed() {\n    this.framesPassed += 1;\n  }\n\n  resetFramesPassed() {\n    this.framesPassed = 0;\n  }\n\n  run() {\n    this.sprite = primeapeRunSprite;\n    this.physics.dLeft = PRIMEAPE_SPEED;\n  }\n\n  stop() {\n    this.sprite = primeapeStaticSprite;\n    this.physics.dLeft = 0;\n  }\n\n  punch() {\n    this.sprite = primeapePunchSprite;\n    this.physics.dLeft = 0;\n  }\n\n  randomAction() {\n    const randomNumber = randomFromRange(1, 3);\n    if (randomNumber === 1) {\n      this.stop();\n    }\n    if (randomNumber === 2) {\n      this.run();\n    }\n    if (randomNumber === 3) {\n      this.punch();\n    }\n  }\n\n  isOutOfBounds() {\n    return this.physics.x + this.sprite.width < 0;\n  }\n\n  resetPhysics() {\n    this.physics = primeapePhysics();\n  }\n}\n\nexport default Primeape;\n","import Pikachu from '../pikachu/pikachu';\nimport Bubble from '../bubbles/bubble';\nimport Spearow from '../spearow/spearow';\nimport Dragonite from '../dragonite/dragonite';\nimport Primeape from '../primeape/primeape';\n\nconst initialAssets = () => ({\n  pikachu: new Pikachu(),\n  dragonites: Dragonite.makeDragonites(),\n  primeapes: Primeape.makePrimeapes(),\n  spearows: Spearow.makeSpearows(),\n  bubbles: Bubble.makeBubbles(),\n});\n\nexport default initialAssets;\n","import {\n  CANVAS_WIDTH,\n  CANVAS_HEIGHT,\n} from '../constant';\n\nexport const drawSplashScreen = (ctx) => {\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n  ctx.font = '40px Comic Sans MS';\n  ctx.fillStyle = 'white';\n  ctx.textAlign = 'center';\n\n  ctx.fillText(\n    'WELCOME!',\n    CANVAS_WIDTH / 2,\n    CANVAS_HEIGHT / 2 - 55,\n  );\n\n  ctx.font = '20px Comic Sans MS';\n  ctx.fillText(\n    'Press SPACEBAR to start',\n    CANVAS_WIDTH / 2,\n    CANVAS_HEIGHT / 2 + 10,\n  );\n  ctx.fillText(\n    'Use A, D, W to move',\n    CANVAS_WIDTH / 2,\n    CANVAS_HEIGHT / 2 + 40,\n  );\n};\n\nexport const drawGameOver = (ctx, score) => {\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n  ctx.font = '40px Comic Sans MS';\n  ctx.fillStyle = 'white';\n  ctx.textAlign = 'center';\n\n  ctx.fillText(\n    'GAME OVER',\n    CANVAS_WIDTH / 2,\n    CANVAS_HEIGHT / 2 - 55,\n  );\n\n  ctx.font = '20px Comic Sans MS';\n  ctx.fillText(\n    `Your Score is: ${score}`,\n    CANVAS_WIDTH / 2,\n    CANVAS_HEIGHT / 2 + 10,\n  );\n  ctx.fillText(\n    'Press SPACEBAR to restart',\n    CANVAS_WIDTH / 2,\n    CANVAS_HEIGHT / 2 + 40,\n  );\n};\n","import { drawPikachu } from './draw_asset';\nimport drawPoints from './draw_points';\nimport drawDragonites from './draw_dragonites';\nimport drawPrimeapes from './draw_primeapes';\nimport drawBubbles from './draw_bubbles';\nimport drawSpearows from './draw_spearows';\nimport { PIKACHU_MASS } from '../constant';\nimport initialAssets from './assets';\n\nimport {\n  drawSplashScreen,\n  drawGameOver,\n} from './draw_splash_screen';\n\nimport {\n  removeCanvasFilterInvert,\n  playAudio,\n} from '../domManipulators';\n\nclass GameCanvas {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.assets = initialAssets();\n    this.state = 'begin';\n  }\n\n  begin() {\n    this.state = 'begin';\n  }\n\n  play() {\n    removeCanvasFilterInvert();\n    playAudio();\n    this.assets = initialAssets();\n    this.state = 'start';\n  }\n\n  gameOver() {\n    this.state = 'gameOver';\n  }\n\n  draw(fps) {\n    const fpsInterval = 1000 / fps;\n    let then = performance.now();\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      const now = performance.now();\n      const elapsed = now - then;\n\n      if (elapsed > fpsInterval) {\n        then = now - (elapsed % fpsInterval);\n\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        const assets = Object.values(this.assets);\n        const [pikachu, dragonites, primeapes, spearows, bubbles] = assets;\n\n        if (pikachu.lifeLeft <= 0) {\n          this.gameOver(pikachu);\n          pikachu.faint();\n        }\n\n        drawPikachu(pikachu, this.ctx);\n\n        if (this.state === 'begin') {\n          drawSplashScreen(this.ctx);\n        } else if (this.state === 'gameOver') {\n          drawGameOver(this.ctx, pikachu.points);\n        } else {\n          pikachu.physics.mass = PIKACHU_MASS;\n          pikachu.isKeyLock = false;\n\n          drawSpearows(spearows, pikachu, this.ctx);\n          drawPrimeapes(primeapes, pikachu, this.ctx);\n          drawDragonites(dragonites, pikachu, this.ctx);\n          drawBubbles(bubbles, pikachu, this.ctx);\n\n          drawPoints(pikachu.points, pikachu.lifeLeft, this.ctx);\n        }\n      }\n    };\n\n    animate();\n  }\n}\n\nexport default GameCanvas;\n","const setupControlListeners = (game) => {\n  window.addEventListener('keydown', ({ key, repeat }) => {\n    if (repeat) return;\n\n    if (key === ' ') {\n      if (game.state === 'begin' || game.state === 'gameOver') {\n        game.play();\n      }\n    }\n\n    const { pikachu } = game.assets;\n\n    if (pikachu.isKeyLock) return;\n\n    if (key === 'w') {\n      pikachu.jump();\n    }\n    if (key === 'a') {\n      pikachu.runLeft();\n    }\n    if (key === 'd') {\n      pikachu.runRight();\n    }\n  });\n\n  window.addEventListener('keyup', ({ key }) => {\n    const { pikachu } = game.assets;\n\n    if (pikachu.isKeyLock) return;\n\n    pikachu.stop(key);\n  });\n};\n\nexport default setupControlListeners;\n","import GameCanvas from './game/game_canvas/game_canvas';\nimport setupControlListeners from './game/pikachu/pikachu_controls';\n\nimport {\n  CANVAS_WIDTH,\n  CANVAS_HEIGHT,\n} from './game/constant';\n\nimport './assets/css/normalize_8_0_1.css';\nimport './assets/css/canvas.css';\nimport { setupVolumeButtonEventListener } from './game/domManipulators';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.querySelector('canvas');\n  const ctx = canvas.getContext('2d');\n\n  canvas.width = CANVAS_WIDTH;\n  canvas.height = CANVAS_HEIGHT;\n\n  const game = new GameCanvas(canvas, ctx);\n\n  game.draw(15);\n\n  setupControlListeners(game);\n  setupVolumeButtonEventListener();\n});\n"]}